#Réalisé par Dr Hamid MADANI 
#Le 31/05/2024

1 On remote server:

 1.1 MySQL
      CREATE DATABASE project_backup_monitoring;
      USE project_backup_monitoring;
      CREATE TABLE `backup_status` (
        `id` int(11) NOT NULL AUTO_INCREMENT,
        `project_name` varchar(255) NOT NULL,
        `backup_time` datetime NOT NULL,
        `step` varchar(255) NOT NULL,
        `status` enum('not_started','in_progress','completed','error') NOT NULL,
        `message` text,
        `timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
        `exec_time` datetime DEFAULT NULL,
        `backup_file` varchar(255) DEFAULT NULL,
        PRIMARY KEY (`id`)
      ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

1.2 Create Web Site 
    copie ihm directry to the server directory site
      index.php
      config.php
      delete_record.php
      jquery-3.6.0.min.js
      retry_action.php

1.3 Update config data 
    Edit config.php 
    // Connexion à la base de données (à personnaliser avec vos propres informations de connexion)
       $servername = "localhost";
       $username = "monitor_user";
       $password = "monitor_pass@26";
       $dbname = "project_backup_monitoring";

 1.4 Create Data Directory
      sudo mkdir /path/to/dumps"

2 On Local Server
    2.1 Make data and shel Script directory,
         sudo mkdir /path/to/dumps
         sudo chmod 777 /path/to/dumps
   
         sudo mkdir /path/to/sh_scripts
         sudo chmod 777 /path/to/sh_scripts
   
    2.3  prepare backup_and_upload.sh
         2.3.1 install sshpass: 
                Debian/Ubuntu :
                  sudo apt-get install sshpass
               RedHat/CentOS :
                  sudo yum install sshpass
         2.3.2 copy backup_and_upload.sh to /path/to/sh_scripts/backup_and_upload.sh
              if UTF-8 problème execute 
              dos2unix ./backup_and_upload.sh
         2.3.3 execution du script
             sudo ./backup_and_upload.sh
    2.4  Automatiser l'execution du scripte sh
         Une execution aotomatique et régulières tout les jours à 19 heurs
         Ajouter au cron la ligne suivante  with promt     
          $EDITOR=nano crontab -e
          0 19 * * * /path/to/backup_and_upload_test.sh >> /path/to/backup_and_upload.log 2>&1
       
3 syncronisations de repertoires 
    3.1 Install des outils 
         Debian/Ubuntu :
                  sudo apt-get install rsync

    3.2 Synchronistation Unidirectionelle
         execution du scripte suivant sur la ligne de commande sinon le placer dans le cron
         ## toutes les minutes * * * * * 
         ## marquer la date dans le log echo "$(date) - Starting rsync" >> /path/to/log/rsync.log
         ## && deux commandes successif 
         ## connexion avec password en ssh sshpass -p 'remote_user_password' rsync -avz -e ssh
         ## repertoire local /path/to/remote/directory  
         ## repertoire distant user@remoteHost:/path/to/remote/directory
         ## stdout des erreurs >> /path/to/log/rsync.log 2>&1
  
         ## * * * * * echo "$(date) - Starting rsync" >> /path/to/log/rsync.log &&  sshpass -p 'remote_user_password' rsync -avz -e ssh /path/to/remote/directory     
           hmd@remoteHost:/path/to/remote/directory >> /path/to/log/rsync.log 2>&1

         ## Définir les variables
         LOG_FILE="/patho/to/remote/log/rsync.log"
         SOURCE_DIR="/home/hmd/public_html/amia/sites/default/files"
         DEST_USER="remote_user"
         DEST_HOST="remotehost"
         DEST_DIR="/path/to/remote/files"
         PASSWORD="remote_user_password"
         
         ## Ajouter la date et l'heure dans le fichier de log
         ##echo "$(date) - Starting rsync" >> $LOG_FILE
         
         ## Exécuter la commande rsync avec sshpass pour le mot de passe
         echo "$(date) - Starting rsync" >> $LOG_FILE && sshpass -p $PASSWORD rsync -avz -e ssh $SOURCE_DIR $DEST_USER@$DEST_HOST:$DEST_DIR >> $LOG_FILE 2>&1 && echo "$(date) - End rsync ----->" >> $LOG_FILE



            ### Points Importants
           1. **Sécurité** : Il est important de noter que stocker des mots de passe en clair dans des scripts ou des fichiers cron est une mauvaise pratique en termes 
              de sécurité. Il est recommandé d'utiliser des clés SSH sans mot de passe pour les connexions automatisées.
           2. **Permissions** : Assurez-vous que le fichier de log a les bonnes permissions pour permettre l'écriture par le script cron. Par exemple :
                 sudo touch /home/hmd/public_html/medical_office/hmd_mesra/sites/mesra.amia.fr/files_test/rsync.log
                 sudo chown hmd:hmd /home/hmd/public_html/medical_office/hmd_mesra/sites/mesra.amia.fr/files_test/rsync.log
           En utilisant des variables, vous rendez le script plus lisible et facile à maintenir. De plus, cela vous permet de modifier les chemins ou les paramètres 
            en un seul endroit si nécessaire.




    3.3 Syncronistaion bidirectionelle 
       3.3.1 Uniquement avec rsync 
         Dans ce cas il faut juste interchenger le repertoire source et destination de la commande 3.2
       3.3.2 Installation de Unison
            a Install sur Debian/Ubuntu
                sudo apt-get install unison
            b Configuration de Unison
                préparation du fichier de profil sync.prf
                   # Synchronisation des répertoires de /home/hmd/public_html/medical_office/hmd_mesra/sites/mesra.amia.fr/files_test
                   # sur les deux serveurs
                   root = /home/hmd/public_html/medical_office/hmd_mesra/sites/mesra.amia.fr/files_test
                   root = ssh://hmd@amia.fr//home/hmd/private_htmc/medical_office/hmd_mesra/sites/mesra.amia.fr/files_test
                   
                   # Ignorer certains fichiers ou répertoires (facultatif)
                   ignore = Name .DS_Store
                   ignore = Name Thumbs.db

           c Exécution de Unison
                  $ sudo unison sync.prf
           b Automatisation avec Cron
                  * * * * * unison sync.prf >> /var/log/unison.log 2>&1

4 syncronisations des données 
      4.1 Synchroniser les données (incrémentielle)
          Pour une synchronisation incrémentielle plus sophistiquée (où seules les modifications sont appliquées), vous pouvez utiliser pt-table-sync de Percona Toolkit.
          Ce script peut gérer les différences entre les tables et synchroniser les enregistrements.
      4.2 Installer Percona Toolkit
          sudo apt-get install percona-toolkit
      4.3 utilisez pt-table-sync dans un script Shell
          #!/bin/bash
         # Définir les variables pour les bases de données
         SOURCE_DB="db_dev01"
         TARGET_DB="db_dev02"
         USER="your_mysql_user"
         PASSWORD="your_mysql_password"
         HOST="localhost"
         
         # Synchroniser les tables
         pt-table-sync --execute --verbose h=$HOST,D=$SOURCE_DB,u=$USER,p=$PASSWORD h=$HOST,D=$TARGET_DB,u=$USER,p=$PASSWORD
         
         echo "Synchronisation incrémentielle terminée avec succès."



Conclusion
Unison est un excellent outil pour la synchronisation de fichiers et de répertoires entre différents serveurs, offrant une synchronisation bidirectionnelle et la 
possibilité de personnaliser les exclusions. En l'automatisant avec cron, vous pouvez maintenir vos répertoires synchronisés à intervalles réguliers de manière fiable.
